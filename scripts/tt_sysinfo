#!/bin/bash

# Tool that presents a summary of basic system information/specs

VER="1.19"
VERDATE="2020-10-22"

test "$1" = "-c" && export TSSC_AUTO=0
. tss__common
. tss_client
test "$1" = "-c" && unset TSSC_AUTO

echo "${CWHT}Tritech system information tool $CCYA$VER $CPUR($VERDATE)$COFF"

# Verbosity level
SIV=0
test "$1" = "-v" && SIV=1

# Clear (reset) TSS state
if [ "$1" = "-c" ]
	then echo "${CYEL}WARNING:$CWHT clearing TSS state$COFF"
	clear_tss_state
	detect_current_pc
	read_sysinfo
fi

echo "${CCYA}CPU:     $CGRN$(grep "model name" /proc/cpuinfo | sed s/.*:[^A-Za-z0-9]*//g | head -n 1)$COFF ($CBLU$(grep "model name" /proc/cpuinfo | wc -l) cores$COFF)"

tt__read_memory_size

MEMG=$(expr $MEMT / 1024)
MEML=$(expr $MEMT % 1024)
MEML=$(expr $MEML \* 10)
MEML=$(expr $MEML / 512)
MEML=$(expr $MEML \* 5)
test "$MEMT" -lt 1024 && echo "${CPUR}RAM:     $CWHT$MEMT$COFF MB"
test "$MEMT" -gt 1023 && echo "${CPUR}RAM:     $CWHT${MEMG}.${MEML}$COFF GB"

# Calculate the stupid bogus marketing GB size of all hard drives
for X in /sys/block/sd* /sys/block/hd* /sys/block/mmcblk? /sys/block/nvme?n?
	do if [[ -e "$X/device" && "$(cat $X/size 2>/dev/null)" -gt 0 && "$(cat $X/removable 2>/dev/null)" -eq 0 ]]
		then
		Y=$(basename $X)
		SIZE=$(cat "$X/size" 2>/dev/null)
		SIZE=$(expr $SIZE \* 512 / 1000000000)
		SIZETB=$(expr $SIZE / 1000)
		SIZETB2="$SIZETB.$(expr $(expr $SIZE - $SIZETB \* 1000) / 100)"
		DN=$(hdparm -I /dev/$Y 2>/dev/null | grep 'Model Number:' | sed 's/[^:]*[^a-zA-Z0-9]*//')
		DSN=$(hdparm -I /dev/$Y 2>/dev/null | grep 'Serial Number:' | sed 's/[^:]*[^a-zA-Z0-9]*//')
		test -z "$DN" && test -e "$X/device/model" && DN="$(cat $X/device/model)"
		test -z "$DN" && test -e "$X/device/name" && DN="$(cat $X/device/name)"
		test -z "$DSN" && test -e "$X/device/serial" && DSN="$(cat $X/device/serial)"
		test -z "$DN" && DN="unknown"
		test -z "$DSN" && DSN="unknown"
		DN=$(echo "$DN" | sed 's/\s*$//g')
		DSN=$(echo "$DSN" | sed 's/\s*$//g')
		echo "$X" | grep -q "mmcblk" && DN="$DN eMMC SSD"
		echo "$X" | grep -q "nvme" && DN="$DN NVMe SSD"
		echo -n "$CWHT"
		printf "%-9s" "$Y:"
		if [ $SIZETB -eq 0 ]
			then echo "$CPUR$SIZE$COFF GB  (Model $DN, Serial $DSN)"
			else echo "$CPUR$SIZETB2$COFF TB    (Model $DN, Serial $DSN)"
		fi
		tt__hdd_smart_status $Y
	fi
done

unset VGA
if test $SIV -gt 0 && lspci --version >/dev/null 2>&1
	then VGA="$(lspci -mm | grep "VGA compatible" | cut -d\" -f6 | sed 's/^ *//' | head -n 1)"
	echo "${CPUR}VGA:     $VGA$COFF"
fi

unset BIOS BIOS2 BIOS3
if test $SIV -gt 0 && dmidecode -V >/dev/null 2>&1
	then for X in "Manufacturer:" "Product Name:"
		do BIOS="$BIOS $(dmidecode -t baseboard 2>/dev/null | grep -m 1 "$X" | cut -d: -f2)"
	done
	for X in "Vendor:" "Version:" "Release Date:"
		do BIOS2="$BIOS2 $(dmidecode -t bios 2>/dev/null | grep -m 1 "$X" | cut -d: -f2)"
	done
	for X in "Serial Number:" "SKU Number:"
		do BIOS3="$BIOS3 $(dmidecode -t baseboard 2>/dev/null | grep -m 1 "$X" | cut -d: -f2)"
	done
	BIOS="$(echo "$BIOS" | sed 's/^ *//')"
	BIOS2="$(echo "$BIOS2" | sed 's/^ *//')"
	BIOS3="$(echo "$BIOS3" | sed 's/^ *//')"
	test ! -z "$BIOS" && echo "${CRED}ROM:     Product:$CWHT  $BIOS$COFF"
	test ! -z "$BIOS2" && echo "${CRED}ROM:     BIOS ver:$CWHT $BIOS2$COFF"
	test ! -z "$BIOS3" && echo "${CRED}ROM:     Serial #:$CWHT $BIOS3$COFF"
fi

unset NET
for X in /sys/class/net/eth* /sys/class/net/en* /sys/class/net/usb*
	do if [ "$(cat $X/carrier 2>/dev/null)" = "1" ]
		then NET="$NET  $CWHT$(basename $X):"
		LINK="$(cat $X/speed 2>/dev/null)"
		     if [ $LINK -gt 1199 ]; then NET="$NET $BGGRN$CWHT$LINK"
		else if [ $LINK -gt 499 ]; then NET="$NET $CGRN$LINK"
		else if [ $LINK -lt 100 ]; then NET="$NET $CRED$LINK"
		else                             NET="$NET $CYEL$LINK"
		fi; fi; fi
		NET="$NET Mbps$COFF"
	fi
done
if [ -z "$NET" ]
	then echo "${CYEL}NET:     No active wired ethernet connection detected.$COFF"
	else echo "${CGRN}NET:   $NET$COFF"
fi


# If TSS client available, try to display TSS record for system.
if [[ "$TSS_CLIENT" = "1" && ! -z "$PCID" ]]
	then
	echo "${CBLU}TSS:     ${CPUR}PCID: $CWHT$PCID  ${CPUR}WOID: $CWHT$WOID  ${CPUR}Model: $CWHT$MODEL$COFF"
	echo "${CBLU}TSS:     ${CPUR}Name: $CWHT$NAME  ${CPUR}Company: $CWHT$COMPANY$COFF"
	echo "${CBLU}TSS:     ${CPUR}Phone Numbers: $CWHT$PHONE1  $PHONE2  $PHONE3$COFF"
	unset DIAGS NOTES
	for X in A_HDD A_BURNIN A_CLEANER A_BACKUP A_VIRUS A_MBR A_CDROM
		do if [ "$(eval echo "\$$X")" = "1" ]
			then DIAGS="$(echo "$X" | sed s/._//) $DIAGS"
		fi
	done
	for X in N_OVERHEAT N_SPACE N_SLOWAV N_LOWRAM N_BADRAM N_BADHDD N_VIRUS
		do if [ "$(eval echo "\$$X")" = "1" ]
			then NOTES="$(echo "$X" | sed s/._//) $NOTES"
		fi
	done
	# Colorize work approval tag
	test "$N_APPROVE" = "1" && NOTES="$BGGRN$CWHT Approved $COFF$BGBLK $NOTES"
	test -d "/mnt/cifs/customer_backups/$WOID" && NOTES="$BGYEL$CWHT Backup $COFF$BGBLK $NOTES"

	test -z "$DIAGS" && DIAGS="(none) "
	test -z "$NOTES" && NOTES="(none) "
	echo "${CBLU}TSS:     ${CCYA}Diags: $CWHT$DIAGS$COFF ${CCYA}Notes: $CWHT$NOTES$COFF"
	echo "${CBLU}TSS:     ${CCYA}OS:    $CWHT$OS$COFF"
	if [ -n "$PROBDESC" ]
		then
		echo -e "${CBLU}TSS:     ${CCYA}----- Problem Description -----$COFF"
		echo -n "$PROBDESC" | fold -s -w 60 | sed "s/^/${CBLU}TSS:     $CWHT/"
		echo "$COFF"
		else
		echo -e "${CBLU}TSS:     ${CCYA}- Problem Description is Missing -$COFF"
	fi
	if [ -n "$CUSTNOTES" ]
		then
		echo -e "${CBLU}TSS:     ${CCYA}----- Customer-Visible Notes -----$COFF"
		echo -n "$CUSTNOTES" | fold -s -w 60 | sed "s/^/${CBLU}TSS:     $CWHT/"
		echo "$COFF"
		else
		echo -e "${CBLU}TSS:     ${CCYA}- No Customer-Visible Notes Present -$COFF"
	fi
	if [ -n "$TECHNOTES" ]
		then
		echo -e "${CBLU}TSS:     ${CCYA}----- Technician-Only Notes -----$COFF"
		echo -n "$TECHNOTES" | fold -s -w 60 | sed "s/^/${CBLU}TSS:     $CWHT/"
		echo "$COFF"
		else
		echo -e "${CBLU}TSS:     ${CCYA}- No Technician-Only Notes Present -$COFF"
	fi
fi

# If this is a Windows 8 or higher machine with a UEFI BIOS embedded
# product key, show the key.
MSDM=/sys/firmware/acpi/tables/MSDM
if [ -e $MSDM ]
	then echo "${CYEL}WIN:     $CWHT$(strings $MSDM | tail -n 1)$COFF"
fi
