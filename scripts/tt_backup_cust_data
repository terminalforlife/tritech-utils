#!/bin/bash

VER=1.1
VERDATE="2022-02-21"

. tss__common
. tss_client

echo "${CWHT}Tritech customer data backup/restore tool $VER ($VERDATE)"
test ! -x /usr/bin/rsync && echo "${CRED}rsync not found, aborting.$COFF" && exit 1

BACKUPDIR=customer_backups
BACKUPROOT=$BASE/$BACKUPDIR
RSYNC_USER=tritech
export RSYNC_PASSWORD=""

# Use rsync-native mode?
RSM=1
test ! "$BASE" = "/mnt/cifs" && RSM=0

IFS0="$IFS"
IFS1=$(echo -en "\n\b")
IFS="$IFS1"

LOGFILE="/var/log/$(basename "$0").log"

# Detect Bash 4.2 or higher; disable progress if not present
BAD_BASH=0
[ ${BASH_VERSINFO[0]} -lt 4 ] && BAD_BASH=1
[[ ${BASH_VERSINFO[0]} = 4 && ${BASH_VERSINFO[1]} -lt 2 ]] && BAD_BASH=1
[ $BAD_BASH -eq 1 ] && CURPROG=0 && LASTPROG=0 && echo "GNU Bash version < 4.2, so progress indication is turned off"

# Capture current time for progress indicator later
[ $BAD_BASH -eq 0 ] && printf -v LASTPROG '%(%s)T\n' -1

### Functions
rotate_progress () {
	# Provides a rotating progress indicator
	(( ROTATE ++ ))
	case $ROTATE in
		0) C='|';;
		1) C='/';;
		2) C='-';;
		3) C="\\";;
		*) ROTATE=0; C='|' ;;
	esac
	echo -n "${C}"
	test ! "$RBS" = "1" && echo -en "\b"
}

load_rotate () {
	test "$LOADCNT" = "" && LOADCNT=0
	echo -n "${CWHT}Syncing [${CBLU}"
	RBS=1; rotate_progress; RBS=0
	LOADCNT=$((LOADCNT + 1))
	echo -en "${CWHT}] $CGRN$LOADCNT\r$COFF"
}

line_rotate () {
	while read X
		do
		LOADCNT=$((LOADCNT + 1))
		[ $BAD_BASH -eq 0 ] && printf -v CURPROG '%(%s)T\n' -1
		if [ $CURPROG -gt $LASTPROG ]
			then LASTPROG=$CURPROG
			load_rotate
		fi
	done
}

select_backup_data () {
	# Makes a list of items in the root, cuts out names of known files,
	# and prompts to back up anything that remains.
	IDX=0
	echo -e "\nThe following are backup candidates; answer y/n."
	shopt -s nullglob
	for X in * Windows*.old*/*
		do
		ADD=1
		for BL in \
			WINDOWS Windows windows WINNT WinNT winnt WINXP WinXP \
			winxp "System Volume Information" "Program Files" \
			"Program Files (x86)" "MSOCache" RECYCLER Recycler \
			recycler RECYCLED Recycled recycled "\$Recycle.Bin" \
			"\$RECYCLE.BIN" "\$AVG\$" "\$Avg\$" "\$AVG" "\$avg\$" \
			PerfLogs ProgramData Recovery NTLDR ntldr BOOTMGR \
			bootmgr BOOTNXT END Boot grldr GRLDR menu.lst \
			boot.ini BOOT.INI "\$AVG8.VAULT\$" AUTOEXEC.BAT \
			autoexec.bat CONFIG.SYS config.sys arcldr.exe \
			CMPNENTS i386 I386 VALUEADD Config.Msi Garmin \
			INFCACHE.1 IO.SYS io.sys Intel IPH.PH NTDETECT.COM \
			"My Download Files" "My Downloads" "My Games" OEM \
			RHDSetup.log Screensavers.com StubInstaller.exe \
			lexmark Lexmark install.exe setup.exe install.ini \
			updatedatfix.log logfile napster.log ntuser.dat \
			ntuser.dat.LOG nvida.log pagefile.sys rkill.log \
			scramble.log globdata.ini drvrtmp devicetable.log \
			WORKSSETUP _NavCClt.log audio.log book bootsqm.dat \
			dell.sdr WINDOWSCache VC_RED.MSI VC_RED.cab TB.log \
			MSDOS.SYS "\$SysReset" "\$WINDOWS.\~BT" Windows.old \
			"\$Windows.\~WS" AMD BOOTSECT.BAK ESD OneDriveTemp \
			RecoveryLog UserGuidePDF hiberfil.sys swapfile.sys \
			"\$WINRE_BACKUP_PARTITION.MARKER" "\$Windows.~BT" \
			"\$Windows.~WS" "\$SysReset" msdia80.dll bootTel.dat \
			mfg rescue.info session.log setup.log swshare \
			"\$WINDOWS.~BT" "$WinREAgent" "DumpStack.log" \
			"DumpStack.log.tmp"

			do test "$(basename "$X")" = "$BL" && ADD=0 && break
		done
		shopt -u nullglob
		if [[ "$(basename "$X")" = "Documents and Settings" && -d $(dirname "$X")/Users ]]
			then ADD=0
		fi
		if [ "$ADD" = "1" ]
			then
			SZ="$(du -sh "$X" 2>/dev/null | cut -f1)"
			echo -n "$X ($SZ)? "
			read -n 1 Y
			if [[ "$Y" = "y" || "$Y" = "Y" ]]
				then
				echo -e "\r${CGRN}Backing up $CWHT$X $CWHT($SZ)$COFF"
				FILES[$IDX]="$X"
				IDX=$((IDX + 1))
				else
				echo -e "\r${CYEL}Ignoring   $CBLU$X $CWHT($SZ)$COFF"
			fi
		fi
	done
}

scan_for_quickbooks_data () {
	echo -n "Scan for QuickBooks data files? "
	read -n 1 Y
	if [[ "$Y" != "y" && "$Y" != "Y" ]]
		then echo
		else
		test "$IDX" = "" && IDX=0
		echo -e "\nScanning for QuickBooks data files..."
		for X in $(find -name '*.qbw') $(find -name '*.QBW')
			do
			if [ -e "$X" ]
				then
				echo -n "$X ($(du -sh "$X" 2>/dev/null | cut -f1))? "
				read -n 1 Y
				if [[ "$Y" = "y" || "$Y" = "Y" ]]
					then
					echo -e "\r${CGRN}Backing up $CWHT$X$COFF"
					FILES[$IDX]="$X"
					IDX=$((IDX + 1))
					else
					echo -e "\r${CYEL}Ignoring   $CBLU$X$COFF"
				fi
			fi
		done
	fi
}
### End functions

TMP=$(mktemp)
tt__disk_prompt $TMP || exit 1
DEV="$(cat $TMP)"
rm $TMP

PART="$(awk '{ print $3" "$4 }' /proc/partitions | \
	grep $DEV\[p\]*\[1-9\] | sort -gr | \
	awk '{ print $2 }' | tr \\n ' ')"
DEFAULT="$(echo $PART | tr ' ' \\n | head -n 1)"

test -z "$PART" && echo "$CWHT$DEV$CRED has no partitions, aborting.$COFF" && exit 1

echo "${CCYA}Available partitions: $CWHT$PART$COFF"
echo "${CWHT}$DEFAULT$CCYA is the largest partition.$COFF"
tt_fsinfo | grep "/dev/$DEV"
echo -n "${COFF}Which partition (enter for $CWHT$DEFAULT$COFF)? "
read X
PART="$DEFAULT"
test ! -z "$X" && PART="$X"
if [ ! -e /dev/$X ]
	then echo "${CWHT}/dev/$X$CRED does not exist, aborting.$COFF"
	exit 1
fi

echo "${CWHT}Using $CGRN/mnt/$PART$CWHT as hard drive$COFF"

# If UM is 1 at the end of the script, umount MTPT
UM=0
EXIST="$(grep "/dev/$PART" /proc/mounts | head -n 1 | awk '{ print $2 }')"
if [ "$EXIST" = "" ]
	then
	if ! mount /mnt/$PART
		then echo "${CRED}mount /mnt/$PART failed, trying read-only$COFF"
		if ! mount.ntfs-3g /dev/$PART /mnt/$PART -o ro
			then echo "${CRED}Cannot mount /mnt/$PART, giving up.$COFF"
			exit 1
			else RO=1
		fi
	fi
	MTPT="/mnt/$PART"
	U=1
	echo "${CWHT}Mounted /dev/$PART at $CBLU$MTPT$COFF"
	else
	MTPT="$EXIST"
	echo "${CWHT}Using existing mountpoint at $CBLU$MTPT$COFF"
fi

if [ ! "$WOID" = "" ]
	then
	echo -n "Accept automatic WOID $CWHT$WOID$COFF (y/n)? "
	read -n 1 YN
	echo
	test "$YN" = "n" && unset WOID
fi
if [ "$WOID" = "" ]
	then
	echo -n "Manually enter desired work order ID: "
	read WOID
	test "$WOID" = "" && echo "${CRED}No number given, aborting.$COFF" && exit 1
	else echo "${CGRN}Autodetected work order $CPUR$WOID$COFF"
fi
BU="$BACKUPROOT/$WOID"

# Allow user to change backup data location
echo -n "${CWHT}Use default backup data location '$CPUR$BU$COFF' (y/n)? $COFF"
read -n 1 UDBA; echo

case $UDBA in
	n|N)
	echo -n "Enter path to backup data location: "
	read BU
	# Trim leading and trailing whitespace
	shopt -s extglob
	BU="${BU##*( )}"
	BU="${BU%%*( )}"
	shopt -u extglob
	test -z "$BU" && echo "${CRED}Error: backup location string is empty$COFF" && exit 1
	test ! -d "$(dirname "$BU")" && echo "${CRED}Error: backup location's parent directory does not exist$COFF" && exit 1
	# TODO: add rsync-native mode ability
	RSM=0
	;;
esac


echo "${CWHT}Using $CPUR$BU$COFF as backup data location"

test "$BASE" = "/mnt/cifs" && tt_cifs

echo -n "${CWHT}Please specify backup or restore (b/r): $COFF"
read -n 1 BR; echo

case $BR in

b|B)
test "$RSM" = "0" && if [ ! -d $BU ]
	then
	mkdir -p $BU || (echo "mkdir $BU failed" && exit 1)
fi
cd $MTPT

# If we mounted read-only, don't bother running the cleaner
if [ "$RO" != "1" ]
	then
	echo "${CYEL}Press a key to bypass running tt_cleaner...$COFF"
	X=0
	read -t 3 -s -n 1 && echo "${CPUR}Not running tt_cleaner due to user keypress.$COFF" && X=1
	test $X -eq 0 && echo "Please wait while the cleaner is run." && \
		tt_cleaner -Q -N | tee -a $LOGFILE
	unset X
fi

select_backup_data
QB=0
for X in Program\ Files*/Intuit
	do test -d "$X/" && QB=1
done
test "$QB" = "1" && scan_for_quickbooks_data
test "$IDX" -eq "0" && echo "Nothing to back up!" && exit 1

# Change backup destination if in rsync-native mode
test "$RSM" = "1" && BU="${RSYNC_USER}@core::tritech/$BACKUPDIR/$WOID"

C=0
while [ "$C" -lt "$IDX" ]
	do
	echo "$CWHT${FILES[$C]}:$COFF"
	rsync -rtvH --exclude=desktop.ini --exclude=Desktop.ini \
		"$MTPT/${FILES[$C]}" "$BU/" | \
		tee -a $LOGFILE | line_rotate || \
		echo -e "\n${CYEL}rsync encountered errors, check $BU$COFF"
	echo -e "${CWHT}Finished: $CGRN$MTPT/${FILES[$C]}$CWHT => $CPUR$BU$COFF"
	C=$((C + 1))
done
	if [ "$RSM" = "0" ]
		then
		echo "${CGRN}Resetting permissions on backup files.$COFF"
		chown -R $RSYNC_USER:users $BACKUPROOT/$WOID/ 2>/dev/null
		chmod -R ug-s $BACKUPROOT/$WOID/ 2>/dev/null
		chmod -R ug+rwX $BACKUPROOT/$WOID/ 2>/dev/null
		chmod -R o-rwx $BACKUPROOT/$WOID/ 2>/dev/null
	fi
echo -e "${CWHT}Backup complete! Log saved to $LOGFILE$COFF"
;;

r|R)
if [ ! -d "$MTPT/Backup" ]
	then
	mkdir "$MTPT/Backup" || \
		(echo "${CRED}mkdir $BU failed$COFF" && exit 1)
fi
test ! -d $BU && \
	(echo "${CRED}$BU does not exist$COFF" && exit 1)

# Change backup destination if in rsync-native mode
test "$RSM" = "1" && BU="${RSYNC_USER}@core::tritech/$BACKUPDIR/$WOID"

rsync -rtvH "$BU/" "$MTPT/Backup/" | \
	tee -a $LOGFILE | line_rotate || \
	echo -e "\n${CYEL}rsync encountered errors, check $BU$COFF"
echo -e "${CWHT}Finished: $CGRN$BU$CWHT => $CPUR$MTPT/Backup$COFF"
echo -e "\n${CWHT}Log saved to $LOGFILE$COFF"
;;

esac

wait $!
sync

# Unmount (if applicable) and exit
if [ "$U" = "1" ]
	then echo "${CGRN}Unmounting $CWHT$MTPT$COFF"
	X=1
	while sleep 1
		do umount "$MTPT" 2>/dev/null && break
		X=$((X + 1))
		test $X -ge 5 && echo "${CRED}Failed to unmount!$COFF" && break
	done
fi

eval $PASS_COMMAND &
