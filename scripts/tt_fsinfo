#!/bin/bash

# Displays info on storage devices in the system

VER=1.13
VERDATE="2022-08-31"

. tss__common

get_device_info () {
	REM=9; USB=9; DEVSIZE=0; Z=0; DEVSIZE=0
	PTTYPE="MBR"
	tss_file_tool gpt /dev/$1 2>/dev/null | grep -q "yes" && PTTYPE="GPT"
	PTTYPE="${CWHT}[$CBLU$PTTYPE${CWHT}]"
	# Check if removable and/or USB, or if the drive is an empty card reader
	# Empty card readers and invalid disk devices have a 9 in the REM/USB type
	test -e /sys/block/$1/removable && REM="$(tr -d '\n' < /sys/block/$1/removable)"
	test -z "$REM" && REM=9
	if [ -e "/sys/block/$1" ]
		then readlink "/sys/block/$1" | grep -q "/usb" && USB=1 || USB=0
		if [ -e /sys/block/$1/size ]
			then Z=$(cat /sys/block/$1/size)
			else USB=9; Z=0; DEVSIZE=0; return
		fi
		DEVSIZE=$(expr $Z / 2 \* 1024 / 1000000000)
		else USB=9; Z=0; DEVSIZE=0; return
	fi
	if [[ $Z -gt 0 && -e /sys/block/$1/device/model ]]
		then MODEL=$(cat /sys/block/$1/device/model)
		DSN=$(hdparm -I /dev/$1 2>/dev/null | grep 'Serial Number:' | sed 's/[^:]*[^a-zA-Z0-9]*//;s/ *$//g')
		else MODEL="(No model)"
	fi
	if [ "$DEVSIZE" -lt "9" ]
		then DEVSIZE="$(expr $Z / 2 \* 1024 / 1000000) MB"
		else if [ "$DEVSIZE" -gt 999 ]
			then DEVSIZE="$(expr $Z / 2 \* 1024 / 100000000000 | sed 's/\(.*\)\(.\)/\1.\2/') TB"
			else DEVSIZE="$DEVSIZE GB"
		fi
	fi
	case $REM$USB in
		00) TYPE="Internal " ;;
		01) TYPE="USB HDD  " ;;
		10) TYPE="Removable" ;;
		11) TYPE="USB disk " ;;
		09) TYPE="Uncertain" ;;
		19) TYPE="Uncertain" ;;
		90) TYPE="Empty Int" ;;
		91) TYPE="Empty Ext" ;;
		99) TYPE="Empty    " ;;
		*)  TYPE="Type err?" ;;
	esac
	# Auto-space device size string length
	LEN=$(echo "$DEVSIZE" | wc -c); LEN=$((8 - LEN))
	while [ $LEN -gt 0 ]; do DEVSIZE=" $DEVSIZE"; LEN=$((LEN - 1)); done
	unset LEN MDTYPE
	if [ -e /sys/block/$1/md/level ]
		then
		MDTYPE="Linux software $(cat /sys/block/$1/md/level)"
		MEMBERS="$(echo /sys/block/$1/slaves/* | sed "s#/sys/block/$1/slaves/##g")"
	fi
	unset ATTRIBS
	echo "$KILL" | grep -q "$1" && ATTRIBS="${CWHT}[Linux RAID slave]$COFF "
	echo "$MOUNTED" | grep -q "/dev/$1 " && ATTRIBS="$ATTRIBS${CYEL}[Mounted]$COFF "
}

expand_fsid () {
	case $1 in
		#--------MBR types--------
		 0)   FS="Empty       " ;;
		 1)   FS="FAT12       " ;;
		 4)   FS="FAT16       " ;;
		 5)   FS="Extended    " ;;
		 6)   FS="FAT16       " ;;
		 7)   FS="NTFS/exFAT  " ;;
		 b)   FS="FAT32       " ;;
		 c)   FS="FAT32       " ;;
		 e)   FS="FAT16       " ;;
		 f)   FS="Extended    " ;;
		12)   FS="Compaq Diags" ;;
		27)   FS="Recovery    " ;;
		80)   FS="Minix (Old) " ;;
		81)   FS="Minix       " ;;
		82)   FS="Linux swap  " ;;
		83)   FS="Linux       " ;;
		85)   FS="Linux ext'd " ;;
		86)   FS="Windows RAID" ;;
		87)   FS="Windows RAID" ;;
		8e)   FS="Linux LVM   " ;;
		a5)   FS="FreeBSD     " ;;
		a6)   FS="OpenBSD     " ;;
		a9)   FS="NetBSD      " ;;
		de)   FS="Dell Diags  " ;;
		ee)   FS="EFI GPT     " ;;
		ef)   FS="EFT FAT     " ;;
		fd)   FS="Linux RAID  " ;;
		#--------GPT types--------
		0700) FS="Windows data" ;;
		0c01) FS="MS reserved " ;;
		2700) FS="Windows RE  " ;;
		4200) FS="Windows LDMd" ;;
		4201) FS="Windows LDMm" ;;
		7f00) FS="ChromeOS krn" ;;
		7f01) FS="ChromeOS rt " ;;
		7f02) FS="ChromeOS res" ;;
		8200) FS="Linux swap  " ;;
		8300) FS="Linux FS    " ;;
		8301) FS="Linux resv'd" ;;
		8400) FS="Intel RST   " ;;
		8e00) FS="Linux LVM   " ;;
		ab00) FS="Apple boot  " ;;
		af00) FS="Apple HFS(+)" ;;
		af01) FS="Apple RAID  " ;;
		af05) FS="Apl CoreStor" ;;
		ef00) FS="EFI system  " ;;
		ef01) FS="MBR part    " ;;
		ef02) FS="BIOS boot   " ;;
		fd00) FS="Linux RAID  " ;;
		*)    FS="Unknown     " ;;
	esac
}

NP=0; NOSMART=0; NORAID=0
for X in $@
	do
	# If "nopart" is passed, only display devices.
	test "$X" = "nopart" && NP=1
	# Allow display without SMART data
	test "$X" = "nosmart" && NOSMART=1
	# Do not display RAID arrays
	test "$X" = "noraid" && NORAID=1
done


if [ "$NP" = "0" ]
	then echo "${CWHT}Tritech filesystem info tool $CCYA$VER $CPUR($VERDATE)$COFF"
fi

# Detect fdisk binary location
if [ -e /sbin/fdisk ]; then FDISK=/sbin/fdisk; fi
if [ -e /usr/sbin/fdisk ]; then FDISK=/usr/sbin/fdisk; fi
if [ -e /sbin/sgdisk ]; then SGDISK=/sbin/sgdisk; fi
if [ -e /usr/sbin/sgdisk ]; then SGDISK=/usr/sbin/sgdisk; fi

# util-linux fdisk uses sectors instead of blocks; detect it and modify as needed
FD_FIELD=5; FD_MULT=1024
$FDISK -V 2>/dev/null | grep -q 'util-linux' && FD_FIELD=6 && FD_MULT=512

PART=$(mktemp)
DRIVES="$(echo /dev/sd? /dev/hd? /dev/mmcblk? /dev/nvme?n? | tr ' ' '\n' | grep -v '\?' | sort)"

if [ -z "$DRIVES" ]
	then echo -e "\n${CYEL}No drives were detected on this computer!  ${CWHT}:-($COFF\n"
	exit 1
fi
# Pulls partition info via fdisk and adds lines to PART
# in the format:  /dev/devX=type.size_in_1k_blocks
for DRIVE in $DRIVES
	do
	DBN="$(basename $DRIVE)"
	# Remove drives that have device nodes but the kernel says are bogus
	test ! -e /sys/block/$DBN && DRIVES="$(echo "$DRIVES" | sed s#$DRIVE##)" && continue
	if tss_file_tool gpt $DRIVE 2>/dev/null | grep -q "no"
		then $FDISK -l $DRIVE 2>/dev/null | grep /dev | \
			grep -v Disk | tr -d \* | tr -d + | \
			awk '{ print $1"="$'$FD_FIELD'":"$4 }' >> $PART
		else $SGDISK -p $DRIVE 2>/dev/null | grep '^   ' | \
			sed 's/  */ /g;s/^ //g' | while read LINE
			do
			HWSS1=$(cat /sys/block/$DBN/queue/hw_sector_size)
			HWSS2=$(expr $HWSS1 / 1024)
			PS=$(echo $LINE | cut -d" " -f2)
			PE=$(echo $LINE | cut -d" " -f3)
			PSIZE=$(expr $PE - $PS)
			if [ $HWSS1 -eq 512 ]
				then PSIZE=$(expr $PSIZE / 2)
				else PSIZE=$(expr $PSIZE \* $HWSS2)
			fi
			PN=$(echo $LINE | cut -d" " -f1)
			PT=$(echo $LINE | cut -d" " -f6)
			# Re-add the 'p' for MMC block devices
			echo "$DRIVE" | grep -q -e mmcblk -e nvme && PN="p$PN"
			echo "$DRIVE$PN=$PT:$PSIZE" >> $PART
		done
	fi
done

# Load all RAID slaves and prevent their individual display
KILL="$(echo /sys/block/md*/slaves/* | tr ' ' '\n' | grep -v '\*' | sed 's#.*/##g' | tr '\n' ' ')"

for X in $(echo /dev/md?* | tr ' ' '\n' | grep -v '\?' | sed s#/dev/##g | tr '\n' ' ')
	do [ -e /sys/block/$X ] && [ "$(cat /sys/block/$X/size)" != "0" ] && RAID="$RAID $X"
done

MOUNTED="$(cut -d" " -f1 < /proc/mounts | grep '^/' | sort | uniq | tr \\n ' ') "
ROOTMT="$(mountpoint -d /)"
test "$ROOTMT" = "/ is not a mountpoint" && ROOTMT=0
if [ $(echo $ROOTMT | sed 's/:.*//') -gt 0 ]
	then for X in /sys/block/*/dev
		do grep -q "$ROOTMT" $X && MOUNTED="$MOUNTED $(echo $X | sed 's#/sys/block/\(.*\)/dev#/dev/\1#') "
	done
fi

DRV="none"

for DRV in $DRIVES
	do NPT=1; NPD=0; X=$(echo "$DRV" | sed s./dev/..)
	# Ignore devices that have zero size (usually empty drives)
	test "$(cat /sys/block/$X/size)" = "0" && continue
	# If no partition 1-4 exists, don't display partitions
	for C in 1 2 3 4 p1 p2 p3 p4
		do test -e "/sys/block/$X/$X$C" && NPT=0
	done
	test "$NP" = "1" && NPT=1
	get_device_info $X
	if [ "$DEVSIZE" != "0 MB" ]
		then unset DSN2
		test -n "$DSN" && DSN2=" $COFF($DSN) "
		echo -en "$CPUR$X: $CGRN$DEVSIZE  $CWHT$PTTYPE  $CRED$TYPE $CCYA$MODEL$DSN2 $CWHT$ATTRIBS$COFF"
		if [[ "$NP" = "0" && "$NPT" = "1" && "$NPD" = "0" ]]
			then echo -n " (no partitions)"; NPD=1
			# For non-partitioned devices, show FS if one is present
			for FST in ntfs exfat hfsplus fvefs
				do test $(tss_file_tool $FST /dev/$X) = "yes" && \
					echo -en "\n$CWHT +-- ${CPUR}Non-partitioned with $CWHT$FST$CPUR filesystem$COFF"
			done
		fi
		echo
		if [ "$NOSMART" != "1" ]
			then
			tt__hdd_smart_status $X -q
			test -n "$S" && echo "$CWHT==== ${CYEL}SMART: $S"
		fi
		else ZERO="$ZERO $X"
	fi

	if [ $NPT -eq 0 ]
		then for X in $(grep "$DRV" "$PART" | tr \\n " ")
			do
			unset PARTATTR
			Y=$(echo $X | tr : " " | awk '{ print $2 }')
			Z=$(expr $Y \* $FD_MULT / 1000000000)
			if [ "$Z" -lt "2" ]
				then Z=$(expr $Y \* $FD_MULT / 1000000)
				Z="${Z} MB"
				else Z="${Z} GB"
			fi
			SIZE="$Z"
			# Auto-space partition size string length
			LEN=$(echo "$SIZE" | wc -c); LEN=$((8 - LEN))
			while [ $LEN -gt 0 ]; do SIZE=" $SIZE"; LEN=$((LEN - 1)); done
			unset LEN
			DEVICE=$(echo "$X" | sed 's/=.*//g')
			FSID=$(echo "$X" | sed 's/^.*=//;s/\..*//;s/:.*//' | tr '[:upper:]' '[:lower:]')
			expand_fsid "$FSID"
			echo "$MOUNTED" | grep -q "$DEVICE " && PARTATTR="$PARTATTR${CYEL}[Mounted]$COFF "
			[[ "$FSID" = "7" || "$FSID" = "0700" ]] && [ $(tss_file_tool fvefs $DEVICE) = "yes" ] && PARTATTR="$PARTATTR$CWHT${BGRED}[Encrypted]$COFF "
			echo "$KILL" | grep -q "$(basename $DEVICE)" || echo "  $CWHT+-- $CPUR$DEVICE  $CGRN$SIZE  $CWHT$FS  $PARTATTR"
		done
	fi
done

if [ "$NORAID" = "0" ]
	then
	test ! -z "$RAID" && echo
	for DRV in $RAID
		do
		get_device_info $DRV
		[ "$Z" = "0" ] && continue
		echo "$CCYA$DRV: $CRED$MDTYPE $CGRN($DEVSIZE)  $CWHT$ATTRIBS$COFF"
		echo "  $CWHT+-- ${CGRN}Members: $CWHT$MEMBERS$COFF"
	done
fi

if [ ! -z "$ZERO" ]
	then echo -e "\n${CCYA}Empty devices: $CYEL$ZERO$COFF"
fi

echo -en "$COFF"
rm -f $PART
