#!/bin/sh

VER=1.0
VERDATE=2021-11-12

if ! mount.winregfs -v >/dev/null 2>/dev/null
	then if ! reged 2>/dev/null | grep -q "reged version"
		then echo "winregfs and reged both missing, can't continue" >&2
		exit 1
	fi
fi

test -z "$TSS_COMMON" && . tss__common
test -z "$TSS_COMMON" && echo "tss__common required but failed to load" >&2 && exit 1

# Constant paths in the registry
CMAJ_PATH="Microsoft/Windows NT/CurrentVersion/CurrentMajorVersionNumber.dw"
CMIN_PATH="Microsoft/Windows NT/CurrentVersion/CurrentMinorVersionNumber.dw"
CVER_PATH="Microsoft/Windows NT/CurrentVersion/CurrentVersion.sz"
DVER_PATH="Microsoft/Windows NT/CurrentVersion/DisplayVersion.sz"
PNAME_PATH="Microsoft/Windows NT/CurrentVersion/ProductName.sz"
EID_PATH="Microsoft/Windows NT/CurrentVersion/EditionID.sz"
RID_PATH="Microsoft/Windows NT/CurrentVersion/ReleaseId.sz"

do_windows_folder_detection
REGSW=__NONE__
REGDIR="$WINDIR/$SYS32/$CONFIG"
for X in $REGDIR/SOFTWARE $REGDIR/software $REGDIR/Software
	do test -e "$X" && REGSW="$X"
done
PRODSPEC=__NONE__
for X in $WINDIR/$SYS32/PRODSPEC.INI $WINDIR/$SYS32/prodspec.ini $WINDIR/$SYS32/Prodspec.ini
	do test -e "$X" && PRODSPEC="$X"
done
test "$REGSW" = "__NONE__" && echo "Cannot find SOFTWARE hive." >&2 && exit 3

if mount.winregfs -v >/dev/null 2>/dev/null
	then
	# Use winregfs to read registry data
	TMP=$(mktemp -d || echo "/tmp/foo")
	if ! mount.winregfs -o ro "$REGSW" $TMP 2>/dev/null
		then echo "error: cannot mount $REGSW" >&1
		fusermount -u $TMP 2>/dev/null
		rmdir --ignore-fail-on-non-empty $TMP
		exit 1
	fi

	# Windows 10 introduced a new set of version values
	if [ -e "$TMP/$CMAJ_PATH" ]
		then
		CMAJ="$(cat "$TMP/$CMAJ_PATH" 2>/dev/null)"
		CMAJ="$(printf "%d" 0x$CMAJ)"
		CMIN="$(cat "$TMP/$CMIN_PATH" 2>/dev/null)"
		CMIN="$(printf "%d" 0x$CMIN)"
		CVER="${CMAJ}.${CMIN}"
		else
		CVER="$(cat "$TMP/$CVER_PATH")"
	fi

	PNAME="$(cat "$TMP/$PNAME_PATH")"
	if [ $(echo "$CVER" | cut -d. -f1) -lt 6 ]
		then EDITION="$(read_inf_section $PRODSPEC "Product Specification" | grep 'Product=' | cut -d' ' -f3- | tr -d \\n | tr -d \\r)"
		else EDITION="$(cat "$TMP/$EID_PATH")"
	fi
	unset RELEASE
	for R in "$TMP/$DVER_PATH" "$TMP/$RID_PATH"
		do [ -e "$R" ] && RELEASE=" $(cat "$R" 2>/dev/null)" && break
	done
	test "$RELEASE" = " " && unset RELEASE
	fusermount -u $TMP
	rm -rf $TMP
fi

# Fall back to the "old way" if anything went wrong
if [ -z "$CVER" ]
	then
	# Use chntpw's reged to read registry data (slower)
	TMP=$(mktemp)
	if reged -x "$REGSW" SOFTWARE 'Microsoft\Windows NT\CurrentVersion' $TMP >/dev/null 2>/dev/null
		then
		sed -i 's/\\CMI-CreateHive{[0-9A-F-]*}//g' $TMP
		# Windows 10 introduced a new set of version values
		CMAJ="$(read_inf_section $TMP 'SOFTWARE\Microsoft\Windows NT\CurrentVersion' 2>/dev/null | grep -i '"CurrentMajorVersionNumber"=dword:' | cut -d: -f2)"
		if [ "$CMAJ" != "" ]
			then
			CMAJ="$(printf "%d" 0x$CMAJ)"
			CMIN="$(read_inf_section $TMP 'SOFTWARE\Microsoft\Windows NT\CurrentVersion' | grep -i '"CurrentMinorVersionNumber"=dword:' | cut -d: -f2)"
			CMIN="$(printf "%d" 0x$CMIN)"
			CVER="${CMAJ}.${CMIN}"
			else
			CVER="$(read_inf_section $TMP 'SOFTWARE\Microsoft\Windows NT\CurrentVersion' | grep -i '"CurrentVersion"=' | cut -d\" -f4)"
		fi
		PNAME="$(read_inf_section $TMP 'SOFTWARE\Microsoft\Windows NT\CurrentVersion' | grep -i '"ProductName"=' | cut -d\" -f4)"
		if [ $(echo "$CVER" | cut -d. -f1) -lt 6 ]
			then EDITION="$(read_inf_section $PRODSPEC "Product Specification" | grep 'Product=' | cut -d' ' -f3- | tr -d \\n | tr -d \\r)"
			else EDITION="$(read_inf_section $TMP 'SOFTWARE\Microsoft\Windows NT\CurrentVersion' | grep -i '"EditionID"=' | cut -d\" -f4)"
		fi
	fi
	rm -f $TMP
fi

if [ "$SYS64" = "__NONE__" ]
	then WINARCH="ntx86"
	else WINARCH="ntamd64"
fi

WINVER="$WINARCH.$CVER"

case $1 in
"-a")	echo "$PNAME ($WINARCH $CVER $EDITION$RELEASE)"
	break ;;
"-A")	echo "${WINARCH}.${CVER}.$EDITION"
	break ;;
*)	echo "$WINVER"
	break ;;
esac
