#!/bin/bash

VER=0.6.1
VERDATE=2022-09-02

# When started, collect information about current interface states
# Attempt to locate a configuration file
# Default to setting up one (and only one) Internet-enabled link
# Set up a control socket only root can touch

SYSNET=/sys/class/net
WPA_CONF=/etc/wpa.conf
TIMEOUT=5

link_up () {
	ip link set up dev $1 2>/dev/null >/dev/null
}

link_down () {
	ip link set down dev $1 2>/dev/null >/dev/null
}

flush_ip () {
	ip addr flush dev $1 2>/dev/null >/dev/null
}

flush_all_interfaces () {
	# Terminate IP configuration for all network interfaces
	# unmount any CIFS filesystems before possibly disconnecting things
	umount -f $(grep '[^ ]* [^ ]* cifs' /proc/mounts | cut -d' ' -f2) 2>/dev/null
	killall -q udhcpc
	killall -q wpa_supplicant
	sleep 0.3
	killall -q -9 udhcpc
	killall -q -9 wpa_supplicant
	for FLUSH in $SYSNET/*
		do FLUSH2="$(basename $FLUSH)"
		echo "$FLUSH2" | grep -qv 'lo$' && flush_ip "$FLUSH2"
	done
	unset IF_INET IF_INET_IP
}

select_bond_interfaces () {
	unset BOND_IFACES B_IFACE
	echo "Select interfaces for LACP bonding"
	echo "   (Speed and duplex must match)"
	echo "----------------------------------"
	NUM=1
	for X in $IFACE_WIRED
		do
		link_up $X
		SPEED=$(cat /sys/class/net/$X/speed)
		DUPLEX=$(cat /sys/class/net/$X/duplex)
		echo "$NUM: $X ($SPEED Mbps, $DUPLEX duplex)"
		NUM=$((NUM + 1))
	done
	echo "Type desired interface numbers i.e. '1 2 4' or type 'all'"
	echo -en "Which interfaces to use (default: all)? "
	read BI
	test -z "$BI" && BI=all
	if [ "$BI" = "all" ]
		then
		# Attach all wired interfaces to the LACP bond
		NUM=$(echo "$IFACE_WIRED" | wc -w)
		BOND_IFACES="$IFACE_WIRED"

		else
		# Attach only selected interfaces
		NUM=$(echo "$BI" | wc -w)
		if [ $NUM -lt 2 ]
			then echo "You must specify at least two interfaces. Aborting."
			return 1
		fi
		for X in $BI
			do NUM=1
			for Y in $IFACE_WIRED
				do test "$X" = "$NUM" && BOND_IFACES="$BOND_IFACES $Y"
				NUM=$((NUM + 1))
			done
		done
	fi
}

setup_lacp () {
	# Set up an 802.3ad (LACP) bond interface from $BOND_IFACES
	ERR=0
	test -z "$BOND_IFACES" && echo "setup_lacp called with no BOND_IFACES!" && return 1
	modprobe bonding 2>/dev/null
	B_IFACE=bond0
	B_DIR=/sys/class/net/$B_IFACE/bonding

	# Clear any existing bonding configuration
	link_down $B_IFACE || ERR=1
	test ! -e $B_DIR/slaves && echo "Cannot set up bonding (no kernel support)." && return 1
	for X in $(cat $B_DIR/slaves)
		do
		link_down $X || ERR=1
		echo -$X > $B_DIR/slaves || ERR=1
		if [ "$ERR" = "1" ]
			then echo "Error removing bond slaves, aborting."
			return 1
		fi
	done
	if [ "$ERR" = "1" ]
		then echo "An error occurred during bond configuration."
		return 1
	fi

	# Attach slaves to bond interface and enable it
	echo 802.3ad > $B_DIR/mode || ERR=1
	echo 0 > $B_DIR/xmit_hash_policy || ERR=1
	echo 100 > $B_DIR/miimon || ERR=1
	echo 5 > $B_DIR/lp_interval || ERR=1
	if [ "$ERR" = "1" ]
		then echo "An error occurred while setting bond parameters."
		return 1
	fi
	link_down $B_IFACE || ERR=1
	for X in $BOND_IFACES
		do
		link_down $X || ERR=1
		echo +$X > $B_DIR/slaves || ERR=1
	done
	if [ "$ERR" = "1" ]
		then echo "Could not attach bond slaves: $BOND_IFACES"
		return 1
	fi
	if ! link_up $B_IFACE
		then echo "Failed to bring the bond interface $B_IFACE online."
		return 1
	fi
	IFACE_WIRED="$B_IFACE"
}

get_interface_state () {
	unset IFACE_WIFI IFACE_WIRED IFACE_LO IFACE_OTHER
	unset IF_CARRIER IF_INET IF_INET_IP
	INTERFACES="$(echo $SYSNET/* | sed "s#$SYSNET/##g")"
	for X in $INTERFACES
		do
		case "$X" in
			eth*) IFACE_WIRED="$IFACE_WIRED $X"; link_up $X ;;
			eno*) IFACE_WIRED="$IFACE_WIRED $X"; link_up $X ;;
			enp*) IFACE_WIRED="$IFACE_WIRED $X"; link_up $X ;;
			usb*) IFACE_WIRED="$IFACE_WIRED $X"; link_up $X ;;
			wlan*) IFACE_WIFI="$IFACE_WIFI $X"; link_up $X ;;
			wlp*) IFACE_WIFI="$IFACE_WIFI $X"; link_up $X ;;
			lo*) IFACE_LO="$IFACE_LO $X"; link_up $X ;;
			*) IFACE_OTHER="$IFACE_OTHER $X" ;;
		esac
		# Bonding overrides normal wired interfaces
		test ! -z "$B_IFACE" && IFACE_WIRED="$B_IFACE" && link_up $IFACE_WIRED
		test "$(cat $SYSNET/$X/carrier 2>/dev/null)" = "1" && IF_CARRIER="$IF_CARRIER $X"
	done
	# If a default route exists, assume the dev is the Internet dev
	IF_INET="$(ip route | grep -m 1 ^default | sed 's/.* dev //g' | tr -d ' ')"
	test -n "$IF_INET" && IF_INET_IP="$(ip addr show dev $IF_INET | grep -m 1 '    inet' | sed 's#    inet \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)/.*#\1#')"
}

get_wireless_networks () {
	eval ESSID=("null" $(iwlist $USE scan | grep ESSID | sed 's/.*"\(.*\)"/"\1" /g' | tr -d \\n))
	EC=${#ESSID[@]}; EC=$((EC - 1))
}

setup_local_loopback () {
	link_up lo
	ip addr show dev lo | grep -q 'inet .*127\.0\.0\.1' || ip addr add 127.0.0.1/8 dev lo
}

setup_internet_connection () {
	get_interface_state
	if [[ ! -z "$IF_INET_IP" && "$1" != "--init" ]]
		then
		echo -en "Connected on ${IF_INET}. Clear and reconfigure (y/n)? "
		read -n 1 RECONF; echo
		if [ "$RECONF" = "y" ]
			then
			flush_all_interfaces
			get_interface_state
			echo "If you want to plug/unplug network cables or adapters,"
			echo "do so now. Press a key to start reconfiguration."
			# Wait for keypress so user can plug/unplug things
			read -n 1 -s
			unset IF_INET_IP IF_INET
		fi
	fi
	LACP_CNT=0
	for X in $IFACE_WIRED
		do grep -q 1 /sys/class/net/$X/carrier && LACP_CNT=$((LACP_CNT + 1))
	done
	if [ $LACP_CNT -gt 1 ]
		then echo -en "Multiple active wired interfaces. Set up LACP bonding (y/n)? "
		read -t 10 -n 1 BOND; echo
		test "$BOND" = "y" && select_bond_interfaces && setup_lacp && unset IF_INET_IP
		else echo "Skipping LACP (not enough wired interfaces active)"
	fi
	if [ -z "$IF_INET_IP" ]
		then
		flush_all_interfaces
		get_interface_state
		for X in $IFACE_WIRED
			do flush_ip $X
			echo "$IF_CARRIER" | grep -q " $X" && udhcpc -t 3 -n -i $X >/dev/null
			get_interface_state
			test ! -z "$IF_INET_IP" && break 2
		done
		# If wired interfaces don't work, set up wireless connectivity
		if [[ -z "$IF_INET_IP" && ! -z "$IFACE_WIFI" ]]
			then for USE in $IFACE_WIFI
				do flush_ip $USE
				get_wireless_networks
				echo -e "\nWireless networks found on interface $USE"
				echo "-----------------------------------------"
				CNT=0; N=999
				while [ $N -gt $CNT ]
					do echo "0: Manual wireless network configuration"
					CNT=0; while [ $CNT -lt $EC ]
						do
						CNT=$((CNT + 1))
						echo "$CNT: ${ESSID[$CNT]}" >&2
					done
					echo -en "\nSelect network (enter to skip, x to abort): "
					read N
					test -z "$N" && break
					test "$N" = "x" && exit 1
					N="$(echo "$N" | tr -cd '[:digit:]')"
					test -z "$N" && N=9999
				done
				test ! -z "$N" && if [ "$N" = "0" ]
					then
					# Manual configuration
					echo "Manual config not yet written"
					else PS=1
					while [[ $PS -ne 0 && $PS -lt 8 ]]
						do echo -n "Network password: "
						read PASS; PS=$(echo "$PASS" | wc -c)
					done
					if [ $PS -ne 0 ]
						then wpa_passphrase "${ESSID[$N]}" "$PASS" > $WPA_CONF
						wpa_supplicant -B -Dwext -i$USE -c$WPA_CONF
						udhcpc -i $USE >/dev/null
					fi
				fi
			get_interface_state
			test ! -z "$IF_INET_IP" && break
			done
		fi
	fi
}

# This hackish option is for network cards that refuse
# to immediately bring up their link correctly.
if [ "$1" = "--init" ]
	then echo "Initializing network connections."
	get_interface_state
	sleep 1
	get_interface_state
	sleep 3
fi
echo "TSS network connection manager $VER ($VERDATE)"
setup_local_loopback
setup_internet_connection
TO=$TIMEOUT
if [ "$1" = "--init" ]
	then while [ -z "$IF_INET_IP" ]
		do
		test -z "$Q" && echo "Trying to bring up a network connection. Press a key to abort."
		Q=1; read -n 1 -t 1 -s && break
		echo -en "Waiting: $TO\r"
		test $TO -eq 0 && echo "Timed out." && break
		TO=$((TO - 1))
		setup_internet_connection
	done
fi
test ! -z "$IF_INET_IP" && echo "Internet up: $IF_INET_IP on $IF_INET"
test -z "$IFACE_WIRED$IFACE_WIFI" && echo "No network adapters available."
