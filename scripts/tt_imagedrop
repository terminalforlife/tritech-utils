#!/bin/bash

VER="2.3.4"
VERDATE="2020-10-02"

shopt -s nullglob
. tss__common

echo "${CWHT}Tritech automatic system image drop $CCYA$VER $CPUR($VERDATE)$COFF"

LZOP=/bin/lzop; test -e /usr/bin/lzop && LZOP=/usr/bin/lzop
GZIP=/bin/gzip; test -e /usr/bin/gzip && GZIP=/usr/bin/gzip
XZ=/bin/xz; test -e /usr/bin/xz && XZ=/usr/bin/xz
TMPFILE="$(mktemp)"

trap clean_exit INT QUIT ABRT TERM HUP

clean_exit () {
	test "$1" != "0" && echo "Interrupted, cleaning up."
	rm -f "$TMPFILE"
	EXIT="$1"; test -n "$EXIT" && EXIT=0
	exit $EXIT
}

check_mounts () {
	# Attempt to unmount before throwing mounting errors
	grep -q "/dev/${DEV}" /proc/mounts && umount /dev/${DEV}* 2>/dev/null
	if grep -q "/dev/${DEV}" /proc/mounts
		then echo "${CRED}Device ${CCYA}${DEV}${CRED} is mounted according to /proc/mounts. Aborting.${COFF}"
		return 1
	fi
}

scan_partitions () {
	test ! -e "/dev/$DEV" && echo "scan_partitions: '/dev/$DEV' does not exist" && return 1
	unset START END TYPE GPT DISK_GUID GUID; CNT=0
	if [ "$(tss_file_tool id /dev/$DEV)" = "gpt" ]
		then GPT=1
		sync
		sgdisk -e /dev/$DEV 2>/dev/null >/dev/null
		DISK_GUID="$(sgdisk -p /dev/$DEV 2>/dev/null | grep '^Disk identifier' | cut -d: -f2 | tr -d ' ')"
		while read LINE
			do CNT=$((CNT + 1))
			START[CNT]=$(echo "$LINE" | cut -d\  -f2)
			SIZE[CNT]=$(echo "$LINE" | cut -d\  -f3)
			TYPE[CNT]=$(echo "$LINE" | cut -d\  -f6)
			GUID[CNT]=$(sgdisk -i $CNT /dev/$DEV 2>/dev/null | grep '^Partition unique GUID' | cut -d: -f2 | tr -d ' ')
		done < <(sgdisk -p /dev/$DEV 2>/dev/null | grep '^Number' -A 128 | grep -v '^Number' | sed 's/^ *//;s/  */ /g')
		else GPT=0  # MBR partitioning
		sync
		while read LINE
			do CNT=$((CNT + 1))
			START[CNT]=$(echo "$LINE" | cut -d\  -f2)
			SIZE[CNT]=$(echo "$LINE" | cut -d\  -f4)
			TYPE[CNT]=$(echo "$LINE" | cut -d\  -f6)
			FLAG[CNT]=$(echo "$LINE" | cut -d\  -f7)
		done < <(sfdisk --force -d -uS /dev/$DEV 2>/dev/null | sed 's/ *//g' | tr = , | grep -v 'Id,0' | grep "^/dev/")
	fi
	if ! hdparm -z /dev/$DEV 2>/dev/null >/dev/null
		then sync
		sleep 2
		! hdparm -z /dev/$DEV 2>/dev/null >/dev/null && return 2
	fi
	test "$CNT" = "0" && return 1
	return 0
}

maximize_last_partition () {
	ERR=0
	sync
	sleep 2
	if [ "$GPT" = "1" ]
		then
		# For GPT: delete, recreate, set type GUID, set partition GUID
		sgdisk -d $CNT /dev/$DEV 2>/dev/null >/dev/null || ERR=1
		sgdisk -n $CNT:${START[CNT]}:0 /dev/$DEV 2>/dev/null >/dev/null || ERR=2
		sgdisk -t $CNT:${TYPE[CNT]} /dev/$DEV 2>/dev/null >/dev/null || ERR=3
		sgdisk -u $CNT:${GUID[CNT]} /dev/$DEV 2>/dev/null >/dev/null || ERR=4
		else
		# For MBR: sfdisk can change an existing partition's size without deleting
		echo ",+,,," | sfdisk /dev/$DEV --no-reread --force -uS -N $CNT -H $HEADS 2>/dev/null >/dev/null || ERR=5
		# sfdisk 2.26 and up don't support CHS properly anymore; retry without -H
		test $ERR -eq 5 && ERR=6 && echo ',+,,,' | sfdisk /dev/$DEV --no-reread --force -uS -N $CNT 2>/dev/null >/dev/null && ERR=0
	fi
	hdparm -z /dev/$DEV 2>/dev/null >/dev/null
	test $ERR -gt 0 && echo "Error $ERR during partition maximization" && return 1
	return 0
}

read_new_partition_table () {
	# This wait is required to allow the partition table to be re-read
	sync; sleep 1
	hdparm -z /dev/$DEV 2>/dev/null >/dev/null
	sync; sleep 1
	T=0
	while true
		do
		sync
		test -e /dev/$PART && break
		sleep 1
		T=$((T + 1))
		test "$T" = "5" && echo "Partition failed to come up!" && return 1
	done
	return 0
}

if [ "$NTFSMOUNT" = "0" ]
	then echo "${CRED}WARNING:${COFF} No NTFS mount command found! Auto HAL will be skipped."
fi

# Attempt to mount the Tritech share
if [ "$BASE" = "/mnt/cifs" ]
	then tt_cifs -q
	else echo "${CYEL}Using $BASE as base directory.${COFF}"
fi

# Check for presence of disk images
if [ ! -d "$IMGDIR" ]
	then echo "${CRED}Image directory not found: ${CCYA}${IMGDIR}${COFF}"
	clean_exit 2
fi

MAX=0
if [ "$1" = "maximize" ]
	then echo "${CYEL}Running maximize_last_partition() ONLY$COFF"
	MAX=1
fi

tt__disk_prompt $TMPFILE
DEV=$(cat $TMPFILE)

if [ ! -e /sys/block/$DEV ]
	then echo "${CRED}Device ${CCYA}${DEV}${CRED} does not exist.${COFF}"
	clean_exit 4
fi

! check_mounts && echo "Error checking mount" && clean_exit 1
EFIMODE=0
test -d /sys/firmware/efi && EFIMODE=1 && echo "${CGRN}This system seems to be in ${CWHT}EFI$CGRN mode.$COFF"

if [ $MAX -eq 1 ]
	then
	ERR=1
	XP=0; UEFI=0; GPT=0
	echo "${CGRN}Scanning partitions on $CWHT$DEV$COFF"
	! scan_partitions && echo "Error $? scanning partitions" && clean_exit 1
	if [ "$GPT" = "0" ]
		then echo -n "Specify number of heads for MBR mode (255): "
		read HEADS
		test -z "$HEADS" && HEADS=255
		echo "${CBLU}Using $CWHT$HEADS$CBLU head count"
	fi
	echo "${CGRN}Maximizing last partition$COFF"
	! maximize_last_partition && echo "Error maximizing last partition" && clean_exit 1
	echo "${CGRN}Reading new partition table$COFF"
	! read_new_partition_table && echo "Error reading new partition table" && clean_exit 1
	PART=$DEV$CNT
	echo "$DEV" | grep -q -e nvme -e mmcblk && PART="${DEV}p$CNT"
	echo "${CGRN}Resizing NTFS file system to new partition size$COFF"
	! yes | ntfsresize -f /dev/$PART 2>/dev/null >/dev/null && echo "Error resizing NTFS" && clean_exit 1
	clean_exit 0
fi

# Select an image to drop
echo "${CGRN}Choose an image to drop:${COFF}"

# Enumerate image names
IC=0
for X in ${IMGDIR}/*.lzo ${IMGDIR}/*.gz ${IMGDIR}/*.lzma ${IMGDIR}/*.xz
	do IC=$((IC + 1))
	IMAGE[IC]="$(basename "$X")"
	echo "$IC: ${IMAGE[IC]}"
done
test $IC = 0 && echo "Error: no images available in $IMGDIR" && clean_exit 1

echo -n "Which image (1): "
read IMGNUM
test "$IMGNUM" = "" && IMGNUM="1"
IMG="${IMAGE[IMGNUM]}"
XP=0; UEFI=0

echo "$IMG" | grep -q "^xp" && XP=1
echo "$IMG" | grep -q -- "-uefi" && UEFI=1

[[ $UEFI = 1 && $EFIMODE = 0 ]] && echo "${CYEL}NOTICE:$CWHT This computer was booted in MBR mode but a UEFI image was chosen.$COFF"
[[ $UEFI = 0 && $EFIMODE = 1 ]] && echo "${CYEL}NOTICE:$CWHT This computer was booted in EFI mode but an MBR image was chosen.$COFF"

if [ ! -e $IMGDIR/$IMG ]
	then echo "${CRED}ERROR: $CCYA$IMGDIR/$IMG$CRED not found. Aborting.$COFF"
	clean_exit 6
fi

# Do a bitness sanity check
ARCH=$(uname -m)
BITNESS=0; IMG_BIT=0
echo "$ARCH" | grep -q 'i[3456]86' && BITNESS=32
echo "$ARCH" | grep -q 'x86_64' && BITNESS=64
echo "$IMG" | grep -q '_32' && IMG_BIT=32
echo "$IMG" | grep -q '_64' && IMG_BIT=64
if [[ $BITNESS -ne 0 && $IMG_BIT -ne 0 && $BITNESS -ne $IMG_BIT ]]
	then echo "${CYEL}===== WARNING =====$COFF"
	echo "${CYEL}The image is $CWHT${IMG_BIT}-bit$CYEL but you booted TSS in $CWHT${BITNESS}-bit$CYEL mode$COFF"
	echo -n "${CYEL}Are you sure that you want to continue (y/N)? $COFF"
	read -n 1 X; echo
	if [[ "$X" != "y" && "$X" != "Y" ]]
		then echo "${CRED}Aborting due to image bitness mismatch.$COFF"
		exit 1
	fi
fi

# Do a rough capacity sanity check
BLOCKS=$(cat /sys/block/$DEV/size)
DESTSIZE=$(stat -c %s "$IMGDIR/$IMG")
DESTSIZE=$((DESTSIZE * 24))
DESTSIZE=$((DESTSIZE / 10))
DEVBYTES=$((BLOCKS * 512))
if [ $DESTSIZE -ge $DEVBYTES ]
	then echo "${CYEL}===== WARNING =====$COFF"
	echo "${CWHT}$DEV$CYEL may not be large enough for this image ($DESTSIZE > $DEVBYTES)$COFF"
	echo -n "${CYEL}Are you sure that you want to continue (y/N)? $COFF"
	read -n 1 X
	if [[ $X != "n" && $X != "N" ]]
		then echo "${CRED}Aborting due to insufficient device capacity.$COFF"
		exit 1
	fi
fi

# Get head count to do geometry recalculations
if [ $UEFI -eq 0 ]
	then echo -n "Enter the geometric head count from 1 to 255 for $DEV (255): "
	read HEADS
	test "$HEADS" = "" && HEADS="255"
	# Verify that the head count is a valid number
	HEADS="$(echo -n "$HEADS" | grep -v '[a-zA-Z]' | grep '[0-9]' | cut -b 1-3)"
	if ! echo "$HEADS" | grep -q '[0-9]'
		then echo "You did not enter a valid number. Aborting."
		eval $FAIL_COMMAND &
		clean_exit 7
	fi
	XHEADS=$(printf "%x" $HEADS)
	case $(echo -n "$XHEADS" | wc -c) in
		1|2) ;;
		*) echo "You did not enter a valid number. Aborting."
		clean_exit 7 ;;
	esac
	CYLS=$(expr $BLOCKS / $HEADS / 63)
	echo "$DEV: ${HEADS}/${XHEADS} heads, $CYLS cylinders, 63 sectors."
fi

check_mounts

# Use sgdisk to destroy GPT backup sectors, then drop an image
echo "Dropping image $IMG to ${DEV}, please wait."
sgdisk -Z /dev/$DEV 2>/dev/null >/dev/null
sync
echo "$IMG" | grep -q '.lzo$' && DECOMP=$LZOP
echo "$IMG" | grep -q '.gz$' && DECOMP=$GZIP
echo "$IMG" | grep -q '.lzma$' && DECOMP=$XZ
echo "$IMG" | grep -q '.xz$' && DECOMP=$XZ
test -z "$DECOMP" && echo "Image decompressor for $IMG not available. Aborting." && exit 1
if ! $CATCOM "$IMGDIR/$IMG" | $DECOMP -dc > /dev/$DEV
	then echo "Decompressing $IMGDIR/$IMG to $DEV failed. Aborting."
	eval $FAIL_COMMAND &
	clean_exit 8
fi

# Create fdisk script to repartition the device
# Win7 requires a boot partition and must be handled specially
# WARNING: This code ALWAYS assumes the LAST PARTITION is the system partition!
! scan_partitions && echo "Error scanning partitions"  && clean_exit 1
PART=$DEV$CNT
echo "$DEV" | grep -q -e nvme -e mmcblk && PART="${DEV}p$CNT"
! maximize_last_partition && echo "Error reading new partition table" && clean_exit 1
echo "Waiting for new partitions to come up."
! read_new_partition_table && echo "Error reading new partition table" && clean_exit 1

# Change boot sector head counts for NTFS filesystems if not using UEFI
if [ "$UEFI" = "0" ]
	then for PARTS in /dev/${DEV}[0-9]*
		do if [ "$(tss_file_tool id $PARTS)" = "ntfs" ]
			then if ! tss_file_tool ntfsgeom "$PARTS" $XHEADS
				then echo "Modifying NTFS boot sector geometry failed. Aborting."
				eval $FAIL_COMMAND &
				clean_exit 9
			fi
		fi
	done
fi

# Resize the filesystem to fit the new parition
if ! yes | ntfsresize -f /dev/$PART 2>/dev/null >/dev/null
	then echo "NTFS resize on $PART failed. Aborting."
	eval $FAIL_COMMAND &
	clean_exit 11
fi

# Windows XP requires extra work that Vista and up don't
if [ "$XP" = "1" ]
	then
	# Mount the filesystem and change into it to run autohal
	test -d /mnt/$PART || mkdir /mnt/$PART
	if ! $NTFSMOUNT /dev/$PART /mnt/$PART
		then echo "Mounting $PART as NTFS failed. Aborting."
		eval $FAIL_COMMAND &
		clean_exit 12
	fi
	cd /mnt/$PART
	# Insert an appropriate HAL and handle intelppm if needed
	tt_autohal
	if [ "$NTFSMOUNT" = "0" ]
		then echo "intelppm.sys removal skipped due to no NTFS mount."
		else tt__intelppm
	fi
	cd $STARTDIR
	if [ ! "$NTFSMOUNT" = "0" ]
		then umount -l /mnt/$PART || echo "Unmounting /mnt/$PART failed!"
	fi
fi

# Drop Windows 8+ ACPI license key if it exists
if [ -e /sys/firmware/acpi/tables/MSDM ]
	then echo "Microsoft MSDM ACPI table found. Making a Windows key text file."
	test -d /mnt/$PART || mkdir /mnt/$PART
	if ! $NTFSMOUNT /dev/$PART /mnt/$PART
		then echo "Mounting $PART as NTFS failed. Aborting."
		eval $FAIL_COMMAND &
		clean_exit 12
	fi
	strings /sys/firmware/acpi/tables/MSDM | tail -n 1 > /mnt/$PART/windows_key_acpi.txt
	umount -l /mnt/$PART
fi

sync
echo "The image drop was successful."
eval $PASS_COMMAND &
clean_exit 0
